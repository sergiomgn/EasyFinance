name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.10"
  JWT_SECRET_KEY: "test-secret-key-for-ci-only"

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort mypy
        pip install -r src/requirements.txt
        if [ -f src/requirements-dev.txt ]; then pip install -r src/requirements-dev.txt; fi
        if [ -f tests/requirements-test.txt ]; then pip install -r tests/requirements-test.txt; fi
    
    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run pylint
      run: |
        pylint src --exit-zero --output-format=text --reports=no --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"
    
    - name: Run mypy type checking
      run: |
        mypy src --ignore-missing-imports --no-strict-optional

  format:
    name: Code Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-format-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-format-
          ${{ runner.os }}-pip-
    
    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort
    
    - name: Check code formatting with Black
      run: |
        black --check --diff src tests
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src tests

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-test-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        pip install -r src/requirements.txt
        if [ -f src/requirements-dev.txt ]; then pip install -r src/requirements-dev.txt; fi
    
    - name: Install additional test dependencies
      run: |
        pip install httpx python-jose[cryptography] bcrypt pydantic uvicorn fastapi
    
    - name: Run unit tests with pytest
      run: |
        python -m pytest tests/ -v --tb=short --strict-markers
      env:
        JWT_SECRET_KEY: ${{ env.JWT_SECRET_KEY }}
    
    - name: Run tests with coverage (Python 3.10 only)
      if: matrix.python-version == '3.10'
      run: |
        python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term
      env:
        JWT_SECRET_KEY: ${{ env.JWT_SECRET_KEY }}
    
    - name: Upload coverage to Codecov (Python 3.10 only)
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src -f json -o bandit-report.json || true
        bandit -r src
    
    - name: Run Safety check for vulnerabilities
      run: |
        safety check --json || true
        safety check

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, format, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-
          ${{ runner.os }}-pip-
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install -r src/requirements.txt
    
    - name: Build Python package
      run: |
        python -m build --sdist --wheel
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, format, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/Dockerfile
        push: false
        tags: easyfinance:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name easyfinance-test easyfinance:latest
        sleep 10
        # Test if the container is running
        docker ps | grep easyfinance-test
        # Stop the container
        docker stop easyfinance-test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example:
        # - Deploy to staging server
        # - Update staging database
        # - Run smoke tests
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example:
        # - Deploy to production server
        # - Update production database
        # - Run health checks
    
    - name: Run health checks
      run: |
        echo "Running health checks against production..."
        # Add health check commands here

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, format, test, security, build, docker]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.lint.result == 'success' && needs.format.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success' && needs.docker.result == 'success' }}
      run: |
        echo "✅ All CI/CD pipeline jobs completed successfully!"
    
    - name: Notify on failure
      if: ${{ needs.lint.result == 'failure' || needs.format.result == 'failure' || needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure' || needs.docker.result == 'failure' }}
      run: |
        echo "❌ One or more CI/CD pipeline jobs failed!"
        exit 1
